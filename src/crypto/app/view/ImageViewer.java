package crypto.app.view;

import co.edu.unal.crypto.util.ImageStream;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author eduarc
 * @email eduarcastrillo@gmail.com
 */
public class ImageViewer extends javax.swing.JDialog {

    /**
     * Creates new form ImageViewer
     * @param parent
     * @param modal
     */
    public ImageViewer(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        this.setLocationRelativeTo(getParent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pButtons = new javax.swing.JPanel();
        bOpen = new javax.swing.JButton();
        bSave = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();
        bAccept = new javax.swing.JButton();
        pImage = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        bOpen.setText("Open");
        bOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenActionPerformed(evt);
            }
        });
        pButtons.add(bOpen);

        bSave.setText("Save");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });
        pButtons.add(bSave);

        bCancel.setText("Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });
        pButtons.add(bCancel);

        bAccept.setText("Accept");
        bAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAcceptActionPerformed(evt);
            }
        });
        pButtons.add(bAccept);

        getContentPane().add(pButtons, java.awt.BorderLayout.CENTER);

        pImage.setLayout(new java.awt.BorderLayout());
        getContentPane().add(pImage, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOpenActionPerformed
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                
                if (f.isDirectory()) {
                    return true;
                }
                String n = f.getName().toLowerCase();
                return n.endsWith(".png") || n.endsWith(".jpg") || n.endsWith(".bmp") || n.endsWith(".jpeg") || n.endsWith(".gif");    
            }
            @Override
            public String getDescription() {
                return "Image File";
            }
        });
        
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                targetImage = ImageStream.readImage(fileChooser.getSelectedFile().getPath());
                if (binary) {
                    targetImage = ImageStream.binarize((BufferedImage) targetImage);
                }
                pImage.add(new PImage(targetImage), BorderLayout.CENTER);
                pImage.revalidate();
                this.pack();
                this.setLocationRelativeTo(getParent());
            } catch (Exception ex) {
                targetImage = null;
                JOptionPane.showMessageDialog(this, "Error", "Error while reading the image", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_bOpenActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                
                if (f.isDirectory()) {
                    return true;
                }
                String n = f.getName().toLowerCase();
                return n.endsWith(".png") || n.endsWith(".jpg") || n.endsWith(".bmp") || n.endsWith(".jpeg") || n.endsWith(".gif");    
            }
            @Override
            public String getDescription() {
                return "Image File";
            }
        });
        
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String ext = file.getName();
            int idx = ext.lastIndexOf(".");
            if (idx != -1) {
                ext = ext.substring(ext.lastIndexOf(".")+1);
            } else {
                ext = "png";
                file = new File(file.getPath()+"."+ext);
            }
            try {
                ImageIO.write((RenderedImage) targetImage, ext, file);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error", "Error while writing the image", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_bSaveActionPerformed

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        
        targetImage = null;
        this.dispose();
    }//GEN-LAST:event_bCancelActionPerformed

    private void bAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAcceptActionPerformed
        
        this.dispose();
    }//GEN-LAST:event_bAcceptActionPerformed

    public void save(String title, Image img) {
        
        this.setTitle(title);
        targetImage = img;
        bOpen.setEnabled(false);
        pImage.add(new PImage(targetImage), BorderLayout.CENTER);
        pImage.revalidate();
        this.pack();
        this.setLocationRelativeTo(getParent());
        this.setVisible(true);
    }
    
    public Image select(String title, boolean binary) {
        
        targetImage = null;
        this.binary = binary;
        this.setTitle(title);
        bOpen.setEnabled(true);
        bSave.setEnabled(false);
        this.pack();
        this.setLocationRelativeTo(getParent());
        this.setVisible(true);
        return targetImage;
    }
    
    public void show(String title, Image img) {
        
        targetImage = img;
        this.setTitle(title);
        bOpen.setEnabled(false);
        pImage.add(new PImage(img), BorderLayout.CENTER);
        pImage.revalidate();
        this.pack();
        this.setLocationRelativeTo(getParent());
        this.setVisible(true);
    }

    boolean binary;
    Image targetImage;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAccept;
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bOpen;
    private javax.swing.JButton bSave;
    private javax.swing.JPanel pButtons;
    private javax.swing.JPanel pImage;
    // End of variables declaration//GEN-END:variables
}
